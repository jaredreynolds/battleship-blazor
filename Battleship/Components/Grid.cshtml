@inject Game Game

<hr />
<div class="row name-row">
    @if (!inEditState)
    {
        <h3 class="player-name" onclick="@EditName">@Player.Name</h3>
    
        @if (Player.IsMe)
        {
            <span class="name-edit-text">(Click on name to edit)</span>
        }
    }
    @if (inEditState)
    {
        <form>
            New name:
            <input type="text" name="Name" autofocus bind="@Player.Name" />
            <button class="btn btn-primary" onclick="@ChangeName" type="submit">Update</button>
        </form>
    }
</div>
<div class="board-definition-name">@(Player.IsMe ? "Me" : "Opponent")</div>
<div class="grid">
    @foreach (var squareRow in Player.Squares)
    {
        <div class="square-row row">
            @foreach (var square in squareRow)
            {
                <Square Status="@square.Status" Ship="@(Player.IsMe ? square.Ship : null)" />
            }
        </div>
    }
</div>

@if (Player.IsMe && Game.State == GameState.ShipPlacement)
{
    <ShipPicker Fleet="@Player.Fleet" SelectedShipChanged="@OnSelectedShipChanged" />
}

@if (Player.IsMe && Game.State == GameState.ShipPlacement)
{
    <NavLink class="nav-link" href="gameboard?id=0">
        <button class="btn btn-primary">Player 1 View</button>
    </NavLink>
}

@if (Player.IsMe && Game.State == GameState.ShipPlacement)
{
    <NavLink class="nav-link" href="gameboard?id=1">
        <button class="btn btn-primary">Player 2 View</button>
    </NavLink>
}

@functions {
    [Parameter] private Player Player { get; set; }

    private bool inEditState = false;

    void EditName()
    {
        inEditState = true;
    }

    void ChangeName()
    {
        inEditState = false;
    }

    private Ship ShipToPlace { get; set; }

    private void OnSelectedShipChanged(Ship ship)
    {
        ShipToPlace = ship;
        StateHasChanged();
    }
}